#!/usr/bin/env python

import logging
import sys
from optparse import OptionParser
import os
from sipload.saicall import SaiCall
from sipload.common.utils import parse_packages

def distribute_calls_process(call):
    for package in parse_packages(opts.filename):
        if call.sai_package_related_to_call(package):
            pass

if __name__ == '__main__':
    usage = "usage: %prog -f <pcap file> -o outdir[options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    #optp.add_option('-v', '--verbose', help='set logging to DEBUG',
    #                action='store_const', dest='loglevel',
    #                const=5, default=logging.INFO)
    optp.add_option('-f', '--file',
                    help='pcap file sip package',
                    dest='filename')
    optp.add_option('-o', '--outdir',
                    help='outdir for pcap file sae',
                    dest='outdir')
    opts, args = optp.parse_args()

    logging.basicConfig(level=opts.loglevel,
                        format='%(asctime)s %(levelname)-8s %(message)s')

    if not opts.filename:
        print("Please specify the pcap filename")
        optp.print_help()
        sys.exit(1)

    if not opts.outdir or not os.path.isdir(opts.outdir):
        print("Please specify the outdir directory")
        optp.print_help()
        sys.exit(1)

    user_file_data = ""
    try:
        with open(opts.filename, 'r') as user_file:
            user_file_data = user_file.readlines()
    except Exception as e:
        print("Can't read file %s" % opts.filename)
        print(e)
        sys.exit(1)

    calls = []
    for package in parse_packages(opts.filename):
        if SaiCall.is_call_start(package):
            call = SaiCall(opts=opts, start_package=package)
            calls.append(call)
            continue
        for call in calls:
            if call.is_call_package(package):
                call.add_package(package)

    for call in calls:
        call.remove_duplicates()
        call.save_pcap()
