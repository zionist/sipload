#!/usr/bin/env python
import ConfigParser
import logging
import sys
import resource
import os
from optparse import OptionParser

from sipload.scenario.eli_call import InbcEliScenario, MkkcMkcaEliScenario
from sipload.scenario.sai_call import CredSaiScenario, InviteSaiScenario
from sipload.common.utils import get_packages


if __name__ == '__main__':
    usage = "usage: %prog -f <pcap file> -o outdir[options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    optp.add_option('-v', '--verbose', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=5, default=logging.INFO)
    optp.add_option('-t', '--type',
                    help='component test type "SAI" or "ELI"',
                    dest='type', default="ELI")
    optp.add_option('-f', '--file',
                    help='pcap file sip package',
                    dest='filename')
    optp.add_option('-c', '--conf',
                    help='conf file',
                    dest='conf_file', default="conf.cfg")
    optp.add_option('-o', '--outdir',
                    help='outdir for pcap files',
                    dest='outdir')
    opts, args = optp.parse_args()

    logging.basicConfig(level=opts.loglevel,
                        format='%(asctime)s %(levelname)-8s %(message)s')

    if not opts.filename:
        print("Please specify the pcap filename")
        optp.print_help()
        sys.exit(1)

    if not opts.type:
        print("Please specify component test type")
        optp.print_help()
        sys.exit(1)

    if not os.path.isfile(opts.conf_file):
        print("Please specify the conf filename")
        optp.print_help()
        sys.exit(1)

    if not opts.outdir or not os.path.isdir(opts.outdir):
        print("Please specify the outdir directory")
        optp.print_help()
        sys.exit(1)

    try:
        with open(opts.filename, 'r') as user_file:
            pass
    except Exception as e:
        print("Can't read file %s" % opts.filename)
        print(e)
        sys.exit(1)

    config = ConfigParser.ConfigParser()
    config.readfp(open(opts.conf_file))
    setattr(opts, "config", config)

    calls = []
    packages_num = 0

    get_packages_func = get_packages

    logging.info("first run")
    logging.info("mem usage %s MB" % str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000))
    for package in get_packages_func(opts.filename):
        if opts.type == "SAI":
            if CredSaiScenario.is_call_start(opts, package):
                call = CredSaiScenario(opts=opts, start_package=package)
                calls.append(call)
                continue
            if InviteSaiScenario.is_call_start(opts, package):
                call = InviteSaiScenario(opts=opts, start_package=package)
                calls.append(call)
                continue

        if opts.type == "ELI":
            if InbcEliScenario.is_call_start(opts, package):
                call = InbcEliScenario(opts=opts, start_package=package)
                calls.append(call)
                continue
            if MkkcMkcaEliScenario.is_call_start(opts, package):
                call = MkkcMkcaEliScenario(opts, start_package=package)
                calls.append(call)
                continue

        for call in calls:
            if call.is_call_package(package):
                call.add_package(package)

    # triple run for ELI
    if opts.type == "ELI":
        logging.info("we are parsing ELI scenarios, + 2 extra run")
        logging.info("remove duplicate packages")
        for call in calls:
            call.remove_duplicate_packages()
        logging.info("second run")
        logging.info("mem usage %s MB" % str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000))
        for package in get_packages_func(opts.filename):
            for call in calls:
                if call.is_call_package(package):
                    call.add_package(package)

        logging.info("remove duplicate packages")
        for call in calls:
            call.remove_duplicate_packages()
        logging.info("third run")
        logging.info("mem usage %s MB" % str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000))
        for package in get_packages_func(opts.filename):
            for call in calls:
                if call.is_call_package(package):
                    call.add_package(package)

    logging.info("remove duplicate packages")

    for call in calls:
        call.remove_duplicate_packages()

    logging.info("remove duplicate calls")
    for call in calls:
        call.remove_duplicate_calls(calls)

    for call in calls:
       call.save_pcap()

    print "Total calls count is %s" % len(calls)
    logging.info("mem usage %s MB" % str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000))


