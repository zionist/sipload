#!/usr/bin/env python

import logging
import struct
import sys
from optparse import OptionParser
import signal
import dpkt
from dpkt import hexdump
from multiprocessing import Process
from dpkt.tcp import TCP
from dpkt.udp import UDP
from dpkt.pcap import Writer
from sipload.saicall import SaiCall
from sipload.common.utils import determine_package_type, parse_packages
from sipload.package import SipMessage
from sipload.package import TptfMessage

from sipload.client import ReceiverFactory, SenderFactory
from sipload.common.constants import SIP_HOST, SIP_PORT, RUNS_COUNT, \
    CALL_DURATION, INTERVAL, WAIT_TIME
from sipload.saicall import sai_get_call_start
from twisted.internet.error import ReactorNotRunning

def distribute_calls_process(call):
    for package in parse_packages(opts.filename):
        if call.sai_package_related_to_call(package):
            pass

if __name__ == '__main__':
    usage = "usage: %prog -f <pcap file> [options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    optp.add_option('-v', '--verbose', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=5, default=logging.INFO)
    optp.add_option('-f', '--file',
                    help='pcap file sip package',
                    dest='filename')
    opts, args = optp.parse_args()

    logging.basicConfig(level=opts.loglevel,
                        format='%(asctime)s %(levelname)-8s %(message)s')

    if not opts.filename:
        print("Please specify the pcap filename")
        optp.print_help()
        sys.exit(1)

    user_file_data = ""
    try:
        with open(opts.filename, 'r') as user_file:
            user_file_data = user_file.readlines()
    except Exception as e:
        print("Can't read file %s" % opts.filename)
        print(e)
        sys.exit(1)

    # out_file = Writer(open("/tmp/test.pcap", 'wb'))
            # packages.append(package)

            # test write file
            # out_file.writepkt(buf, ts)
    # out_file.close()

    calls = [SaiCall(c) for c in filter(sai_get_call_start,
                                     parse_packages(opts.filename) )]

    procs = []
    for call in calls:
        p = Process(target=distribute_calls_process, args=(call, ))
        procs.append(p)

    for p in procs:
        p.start()
    for p in procs:
        p.join()

    # find all packages related ro calls
    #for call in calls:
    #    for package in parse_packages(opts.filename):
    #        if call.sai_package_related_to_call(package):
    #            pass
    #print result.get()
    #pool.terminate()

    #for p in calls_starts:
    #    print (p)

    # find all call_starts

    # find call start

    # catch Ctrl + C
    #def signal_handler(signal, frame):
    #    sys.exit(1)
    #signal.signal(signal.SIGINT, signal_handler)



