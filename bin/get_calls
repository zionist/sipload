#!/usr/bin/env python

import logging
import sys
from optparse import OptionParser
import signal
import dpkt
from dpkt import hexdump
from dpkt.tcp import TCP
from dpkt.udp import UDP
from sipload.call import Call
from sipload.common.utils import determine_package_type
from sipload.package import SipMessage
from sipload.package import TptfMessage

from sipload.client import ReceiverFactory, SenderFactory
from sipload.common.constants import SIP_HOST, SIP_PORT, RUNS_COUNT, \
    CALL_DURATION, INTERVAL, WAIT_TIME
from twisted.internet.error import ReactorNotRunning


if __name__ == '__main__':
    usage = "usage: %prog [host:port] -f <pcap file> [options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    optp.add_option('-v', '--verbose', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=5, default=logging.INFO)
    optp.add_option('-f', '--file',
                    help='pcap file sip package',
                    dest='filename')
    optp.add_option('-r', '--rtp', help='rtp file path', dest='rtp_file',
                    default=None)
    opts, args = optp.parse_args()

    host = None
    port = None
    if not len(args):
        host = SIP_HOST
        port = SIP_PORT
    elif len(args) == 1:
        (host, port) = args[0].split(":")
    if len(args) > 1:
        print("Please set only one host")

    setattr(opts, "host", host)
    setattr(opts, "port", port)

    logging.basicConfig(level=opts.loglevel,
                        format='%(asctime)s %(levelname)-8s %(message)s')

    if not opts.filename:
        print("Please specify the pcap filename")
        optp.print_help()
        sys.exit(1)

    user_file_data = ""
    try:
        with open(opts.filename, 'r') as user_file:
            user_file_data = user_file.readlines()
    except Exception as e:
        print("Can't read file %s" % opts.filename)
        print(e)
        sys.exit(1)

    calls = []
    with open(opts.filename) as f:
        pcap = dpkt.pcap.Reader(f)
        for ts, buf in pcap:
            eth = dpkt.ethernet.Ethernet(buf)
            ip = eth.data
            if eth.type != dpkt.ethernet.ETH_TYPE_IP:
                continue
            if type(ip.data) != TCP and type(ip.data) != UDP:
                continue
            # print hexdump(buf)
            if ip.data.data:
                package_type = determine_package_type(ip.data.data)
                package = package_type.parse(ip.data.data)
            print package

    # catch Ctrl + C
    def signal_handler(signal, frame):
        sys.exit(1)
    signal.signal(signal.SIGINT, signal_handler)



